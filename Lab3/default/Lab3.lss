
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000034a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800202  00800202  000003e0  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000af  00000000  00000000  00000b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000032c  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001b8  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003e9  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000015b  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000056  00000000  00000000  000016e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_11>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_21>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e4       	ldi	r30, 0x4A	; 74
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	02 c0       	rjmp	.+4      	; 0x104 <.do_copy_data_start>

00000100 <.do_copy_data_loop>:
 100:	05 90       	lpm	r0, Z+
 102:	0d 92       	st	X+, r0

00000104 <.do_copy_data_start>:
 104:	a2 30       	cpi	r26, 0x02	; 2
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <.do_copy_data_loop>

0000010a <__do_clear_bss>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	a2 e0       	ldi	r26, 0x02	; 2
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a8 30       	cpi	r26, 0x08	; 8
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 93 00 	call	0x126	; 0x126 <main>
 11e:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <main>:
#include <avr\interrupt.h>

//Main Program
int main(){
	//Port initializations fr LEDS and Switches
	DDRB 	= 0xFF;    //PORTB for LEDS
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	84 b9       	out	0x04, r24	; 4
	PORTB 	= 0x00;
 12a:	15 b8       	out	0x05, r1	; 5
	DDRK = 0x00;  //PORTK as input from switches : PCIN16:PCINT23
 12c:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0xff;
 130:	80 93 08 01 	sts	0x0108, r24
	
	cli();                                                               //Clear interrpts
 134:	f8 94       	cli
	init_timer();
 136:	0e 94 a1 00 	call	0x142	; 0x142 <init_timer>
	init_interrupts();
 13a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <init_interrupts>
	sei();                                                         //Enabling interrupts after initialization
 13e:	78 94       	sei
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x1a>

00000142 <init_timer>:
	 *     3: unused = 0  
	 *     2: unused = 0
	 *     1: WGM01  = 1  Sets Waveform Generation mode to CTC
	 *     0: WGM00  = 0
	 */
	TCCR0A  = _BV(WGM01);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	84 bd       	out	0x24, r24	; 36
	 *     3: WGM02  = 0  Sets Waveform Generation mode to CTC
	 *     2: CS02   = 1  Sets prescaler to 1024, I/O clock
	 *     1: CS01   = 0
	 *     0: CS00   = 1
	 */
	TCCR0B = _BV(CS02) | _BV(CS00);
 146:	95 e0       	ldi	r25, 0x05	; 5
 148:	95 bd       	out	0x25, r25	; 37
   
	// Load Compare values for timer 0
	OCR0A = TIMER0_CNT;
 14a:	93 ec       	ldi	r25, 0xC3	; 195
 14c:	97 bd       	out	0x27, r25	; 39
	OCR0B = 0;		// not using this feature
 14e:	18 bc       	out	0x28, r1	; 40
	 * Bit(s) 7-3: Unused = 0
	 *          2: OCIE0B = 0  Disable timer compare interrupt B
	 *          1: OCIE0A = 1  Enable timer compare interrupt A
	 *          0: TOIE0  = 0  Disable overflow interrupt
     */
	TIMSK0 = _BV(OCIE0A);
 150:	80 93 6e 00 	sts	0x006E, r24

	// Optional: Initialize timer to 0
	TCNT0 = 0; 
 154:	16 bc       	out	0x26, r1	; 38
}
 156:	08 95       	ret

00000158 <__vector_21>:

//End of Code Reuse

//Timer Interrupts
ISR(TIMER0_COMPA_vect){
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
	count++;
 174:	80 91 04 02 	lds	r24, 0x0204
 178:	90 91 05 02 	lds	r25, 0x0205
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	90 93 05 02 	sts	0x0205, r25
 182:	80 93 04 02 	sts	0x0204, r24
	if(count % 40 == 0){                                //1 minute delay       --     1 min /0.025 (TIMER0_TIME ) = 40 time intervals
 186:	68 e2       	ldi	r22, 0x28	; 40
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	0e 94 90 01 	call	0x320	; 0x320 <__udivmodhi4>
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	c1 f4       	brne	.+48     	; 0x1c2 <__vector_21+0x6a>
		PORTB = ~_BV(pinBit++);							//PORT B is toggled and pinBit is increased
 192:	20 91 02 02 	lds	r18, 0x0202
 196:	30 91 03 02 	lds	r19, 0x0203
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 2e       	mov	r0, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_21+0x4e>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <__vector_21+0x4a>
 1aa:	80 95       	com	r24
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	30 93 03 02 	sts	0x0203, r19
 1b6:	20 93 02 02 	sts	0x0202, r18
		count=0;										
 1ba:	10 92 05 02 	sts	0x0205, r1
 1be:	10 92 04 02 	sts	0x0204, r1
	}
	if(pinBit > lastLED) pinBit =0; 					//when the lastLED is reached pinBit starts from 0
 1c2:	20 91 02 02 	lds	r18, 0x0202
 1c6:	30 91 03 02 	lds	r19, 0x0203
 1ca:	80 91 00 02 	lds	r24, 0x0200
 1ce:	90 91 01 02 	lds	r25, 0x0201
 1d2:	82 17       	cp	r24, r18
 1d4:	93 07       	cpc	r25, r19
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <__vector_21+0x88>
 1d8:	10 92 03 02 	sts	0x0203, r1
 1dc:	10 92 02 02 	sts	0x0202, r1
}
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <init_interrupts>:

void init_interrupts(){

	PCICR = (1<<PCIE2);
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	80 93 68 00 	sts	0x0068, r24
		When the PCIE2 bit is set (one) and the I-bit in the Status Register (SREG) is set (one), pin
		change interrupt 2 is enabled. Any change on any enabled PCINT23:16 pin will cause an interrupt.
		The corresponding interrupt of Pin Change Interrupt Request is executed from the PCI2
		Interrupt Vector. PCINT23:16 pins are enabled individually by the PCMSK2 Register.
	*/
	PCMSK2  |= (1<<PCINT16) |(1<<PCINT17) |(1<<PCINT18) |(1<<PCINT19) |(1<<PCINT20) |(1<<PCINT21) |(1<<PCINT22) |(1<<PCINT23);       
 202:	ed e6       	ldi	r30, 0x6D	; 109
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	80 83       	st	Z, r24
		pin. If PCINT23:16 is set and the PCIE2 bit in PCICR is set, pin change interrupt is enabled on
		the corresponding I/O pin. If PCINT23:16 is cleared, pin change interrupt on the corresponding
		I/O pin is disabled.
	*/
	//PCIFR = (1<<PCIF2);
}
 20c:	08 95       	ret

0000020e <blinkthrice>:

//Need a better implementation of blinky
void blinkthrice(){
	PORTB = ~_BV(lastLED);                              //Restrat the LED rotation from first LED
 20e:	20 91 00 02 	lds	r18, 0x0200
 212:	30 91 01 02 	lds	r19, 0x0201
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	ac 01       	movw	r20, r24
 21c:	02 c0       	rjmp	.+4      	; 0x222 <blinkthrice+0x14>
 21e:	44 0f       	add	r20, r20
 220:	55 1f       	adc	r21, r21
 222:	2a 95       	dec	r18
 224:	e2 f7       	brpl	.-8      	; 0x21e <blinkthrice+0x10>
 226:	9a 01       	movw	r18, r20
 228:	20 95       	com	r18
 22a:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	31 ee       	ldi	r19, 0xE1	; 225
 230:	44 e0       	ldi	r20, 0x04	; 4
 232:	21 50       	subi	r18, 0x01	; 1
 234:	30 40       	sbci	r19, 0x00	; 0
 236:	40 40       	sbci	r20, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <blinkthrice+0x24>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <blinkthrice+0x2e>
 23c:	00 00       	nop
	_delay_ms(200);
	PORTB = ~_BV(lastLED);                              //Restrat the LED rotation from first LED
 23e:	20 91 00 02 	lds	r18, 0x0200
 242:	30 91 01 02 	lds	r19, 0x0201
 246:	ac 01       	movw	r20, r24
 248:	02 c0       	rjmp	.+4      	; 0x24e <blinkthrice+0x40>
 24a:	44 0f       	add	r20, r20
 24c:	55 1f       	adc	r21, r21
 24e:	2a 95       	dec	r18
 250:	e2 f7       	brpl	.-8      	; 0x24a <blinkthrice+0x3c>
 252:	9a 01       	movw	r18, r20
 254:	20 95       	com	r18
 256:	25 b9       	out	0x05, r18	; 5
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	31 ee       	ldi	r19, 0xE1	; 225
 25c:	44 e0       	ldi	r20, 0x04	; 4
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	30 40       	sbci	r19, 0x00	; 0
 262:	40 40       	sbci	r20, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <blinkthrice+0x50>
 266:	00 c0       	rjmp	.+0      	; 0x268 <blinkthrice+0x5a>
 268:	00 00       	nop
	_delay_ms(200);
	PORTB = ~_BV(lastLED);                              //Restrat the LED rotation from first LED
 26a:	20 91 00 02 	lds	r18, 0x0200
 26e:	30 91 01 02 	lds	r19, 0x0201
 272:	02 c0       	rjmp	.+4      	; 0x278 <blinkthrice+0x6a>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	2a 95       	dec	r18
 27a:	e2 f7       	brpl	.-8      	; 0x274 <blinkthrice+0x66>
 27c:	80 95       	com	r24
 27e:	85 b9       	out	0x05, r24	; 5
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	91 ee       	ldi	r25, 0xE1	; 225
 284:	a4 e0       	ldi	r26, 0x04	; 4
 286:	81 50       	subi	r24, 0x01	; 1
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	a0 40       	sbci	r26, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <blinkthrice+0x78>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <blinkthrice+0x82>
 290:	00 00       	nop
	_delay_ms(200);
}
 292:	08 95       	ret

00000294 <__vector_11>:

//Interrupts when the PortK goes high - ie, PCINT16:23 toggles
ISR(PCINT2_vect ){
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
	unsigned int swPressed;
	//Checking the Pressed switch
	swPressed = ((~PINK) & ((1<<PINK0)|(1<<PINK1)|(1<<PINK2)|(1<<PINK3)|(1<<PINK4)|(1<<PINK5)|(1<<PINK6)|(1<<PINK7)));       
 2a2:	80 91 06 01 	lds	r24, 0x0106
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	80 95       	com	r24
 2aa:	90 95       	com	r25
	//PORTB = ~swPressed;                                   
	
	//Setting the lastLED to be lit based on the pin selection. While rotating the last LED to light up would be the switch that was pressed
	if(swPressed & (1<<PINK0))
 2ac:	80 ff       	sbrs	r24, 0
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <__vector_11+0x26>
		lastLED = 0;
 2b0:	10 92 01 02 	sts	0x0201, r1
 2b4:	10 92 00 02 	sts	0x0200, r1
 2b8:	26 c0       	rjmp	.+76     	; 0x306 <__vector_11+0x72>
	else if(swPressed & (1<<PINK1))
 2ba:	81 ff       	sbrs	r24, 1
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <__vector_11+0x30>
		lastLED = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	1d c0       	rjmp	.+58     	; 0x2fe <__vector_11+0x6a>
	else if(swPressed & (1<<PINK2))
 2c4:	82 ff       	sbrs	r24, 2
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <__vector_11+0x3a>
		lastLED = 2;
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	18 c0       	rjmp	.+48     	; 0x2fe <__vector_11+0x6a>
	else if(swPressed & (1<<PINK3))
 2ce:	83 ff       	sbrs	r24, 3
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <__vector_11+0x44>
		lastLED = 3;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	13 c0       	rjmp	.+38     	; 0x2fe <__vector_11+0x6a>
	else if(swPressed & (1<<PINK4))
 2d8:	84 ff       	sbrs	r24, 4
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <__vector_11+0x4e>
		lastLED = 4;
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e c0       	rjmp	.+28     	; 0x2fe <__vector_11+0x6a>
	else if(swPressed & (1<<PINK5))
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <__vector_11+0x58>
		lastLED = 5;
 2e6:	85 e0       	ldi	r24, 0x05	; 5
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <__vector_11+0x6a>
	else if(swPressed & (1<<PINK6))
 2ec:	86 ff       	sbrs	r24, 6
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <__vector_11+0x62>
		lastLED = 6;
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__vector_11+0x6a>
	else if(swPressed & (1<<PINK7))
 2f6:	87 ff       	sbrs	r24, 7
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <__vector_11+0x72>
		lastLED = 7;
 2fa:	87 e0       	ldi	r24, 0x07	; 7
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 93 01 02 	sts	0x0201, r25
 302:	80 93 00 02 	sts	0x0200, r24
	pinBit = 0;
 306:	10 92 03 02 	sts	0x0203, r1
 30a:	10 92 02 02 	sts	0x0202, r1
	PORTB = ~_BV(0);				  ///.... Start LED Toggle from the first bit ie Bit 0
 30e:	8e ef       	ldi	r24, 0xFE	; 254
 310:	85 b9       	out	0x05, r24	; 5
	//blinkthrice();                  ///.... Blinking not working - need more work into it!
}
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__udivmodhi4>:
 320:	aa 1b       	sub	r26, r26
 322:	bb 1b       	sub	r27, r27
 324:	51 e1       	ldi	r21, 0x11	; 17
 326:	07 c0       	rjmp	.+14     	; 0x336 <__udivmodhi4_ep>

00000328 <__udivmodhi4_loop>:
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
 32c:	a6 17       	cp	r26, r22
 32e:	b7 07       	cpc	r27, r23
 330:	10 f0       	brcs	.+4      	; 0x336 <__udivmodhi4_ep>
 332:	a6 1b       	sub	r26, r22
 334:	b7 0b       	sbc	r27, r23

00000336 <__udivmodhi4_ep>:
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	5a 95       	dec	r21
 33c:	a9 f7       	brne	.-22     	; 0x328 <__udivmodhi4_loop>
 33e:	80 95       	com	r24
 340:	90 95       	com	r25
 342:	bc 01       	movw	r22, r24
 344:	cd 01       	movw	r24, r26
 346:	08 95       	ret

00000348 <_exit>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <_exit>
